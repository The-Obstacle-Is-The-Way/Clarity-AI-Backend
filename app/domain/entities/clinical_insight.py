"""
Clinical Insight Entity Module

This module defines the domain entities for clinical insights generated by various
AI models in the system, including MentaLLaMA and other NLP components.
"""
from datetime import datetime
from enum import Enum, auto
from typing import Any


class InsightCategory(Enum):
    """Categories for different types of clinical insights."""

    SYMPTOM = auto()  # Observations about patient symptoms
    TREATMENT = auto()  # Insights about treatment efficacy or needs
    RISK = auto()  # Risk factors for negative outcomes
    PROGRESS = auto()  # Progress indicators for recovery
    PSYCHOSOCIAL = auto()  # Psychosocial factors affecting health
    DIAGNOSTIC = auto()  # Diagnostic considerations
    COMORBIDITY = auto()  # Comorbid conditions
    LIFESTYLE = auto()  # Lifestyle and behavioral factors
    MEDICATION = auto()  # Medication-related insights


class InsightSeverity(Enum):
    """Severity levels for clinical insights."""

    LOW = auto()  # Minor or minimal impact
    MODERATE = auto()  # Moderate impact or concern
    HIGH = auto()  # Significant concern or impact
    CRITICAL = auto()  # Urgent or critical concern
    IMPROVING = auto()  # Positive trend
    WORSENING = auto()  # Negative trend
    STABLE = auto()  # No significant change


class ClinicalInsight:
    """
    Represents a structured clinical insight extracted from clinical data.

    This entity encapsulates insights derived from clinical notes, assessments,
    and other clinical data sources through AI analysis.
    """

    def __init__(
        self,
        text: str,
        category: InsightCategory,
        severity: InsightSeverity,
        patient_id: str | None = None,
        analysis_id: str | None = None,
        evidence: str | None = None,
        confidence: float = 0.0,
        timestamp: datetime | None = None,
        metadata: dict[str, Any] | None = None,
    ):
        """
        Initialize a clinical insight.

        Args:
            text: The descriptive text of the insight
            category: The category of the insight
            severity: The severity level of the insight
            patient_id: Optional UUID (as string) of the related patient
            analysis_id: Optional UUID (as string) of the analysis that generated this insight
            evidence: Optional textual evidence supporting the insight
            confidence: Confidence score (0.0-1.0) of the insight
            timestamp: Optional timestamp of when the insight was generated
            metadata: Optional dictionary of additional metadata
        """
        self.text = text
        self.category = category
        self.severity = severity
        self.patient_id = patient_id
        self.analysis_id = analysis_id
        self.evidence = evidence
        self.confidence = confidence
        self.timestamp = timestamp or datetime.now()
        self.metadata = metadata or {}

        # These properties are for compatibility with existing code
        self.temporal_context = {
            "timestamp": self.timestamp.isoformat(),
            "relative_time_reference": metadata.get(
                "relative_time_reference", "current"
            )
            if metadata
            else "current",
        }
        self.related_concepts = metadata.get("related_concepts", []) if metadata else []

    def to_dict(self) -> dict[str, Any]:
        """
        Convert the insight to a dictionary representation.

        Returns:
            Dictionary representation of the insight
        """
        return {
            "text": self.text,
            "category": self.category.name,
            "severity": self.severity.name,
            "patient_id": self.patient_id,
            "analysis_id": self.analysis_id,
            "evidence": self.evidence,
            "confidence": self.confidence,
            "timestamp": self.timestamp.isoformat(),
            "temporal_context": self.temporal_context,
            "related_concepts": self.related_concepts,
            "metadata": self.metadata,
        }

    @classmethod
    def from_dict(cls, data: dict[str, Any]) -> "ClinicalInsight":
        """
        Create an insight from a dictionary representation.

        Args:
            data: Dictionary representation of the insight

        Returns:
            ClinicalInsight instance
        """
        # Convert string enum names to actual enum values
        category = (
            InsightCategory[data["category"]]
            if isinstance(data["category"], str)
            else data["category"]
        )
        severity = (
            InsightSeverity[data["severity"]]
            if isinstance(data["severity"], str)
            else data["severity"]
        )

        # Extract timestamp
        timestamp = (
            datetime.fromisoformat(data["timestamp"])
            if isinstance(data["timestamp"], str)
            else data["timestamp"]
        )

        # Build metadata from additional fields
        metadata = data.get("metadata", {}).copy()
        if "related_concepts" in data:
            metadata["related_concepts"] = data["related_concepts"]
        if "temporal_context" in data and isinstance(data["temporal_context"], dict):
            metadata["relative_time_reference"] = data["temporal_context"].get(
                "relative_time_reference"
            )

        return cls(
            text=data["text"],
            category=category,
            severity=severity,
            patient_id=data.get("patient_id"),
            analysis_id=data.get("analysis_id"),
            evidence=data.get("evidence"),
            confidence=data.get("confidence", 0.0),
            timestamp=timestamp,
            metadata=metadata,
        )

    def __str__(self) -> str:
        """String representation of the insight."""
        return (
            f"ClinicalInsight({self.category.name}, {self.severity.name}): {self.text}"
        )

"""
Digital Twin service interface definition.

This module defines the abstract interface for the Digital Twin service,
following clean architecture principles with proper separation of concerns.
The Digital Twin is the core psychiatric modeling component that integrates
various data sources and ML models into a unified representation of the patient.
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple, Union
from uuid import UUID


class DigitalTwinServiceInterface(ABC):
    """
    Abstract interface for Digital Twin services.
    
    This interface defines the contract for operations related to creating,
    updating, and querying the psychiatric Digital Twin models, allowing for
    different implementations while maintaining a consistent interface.
    """
    
    @abstractmethod
    async def create_digital_twin(
        self,
        patient_id: Union[str, UUID],
        initial_data: Optional[Dict[str, Any]] = None,
        model_configuration: Optional[Dict[str, Any]] = None
    ) -> Tuple[bool, Optional[str], Optional[str]]:
        """
        Create a new Digital Twin for a patient.
        
        Args:
            patient_id: Unique identifier for the patient
            initial_data: Optional initial data to populate the Digital Twin
            model_configuration: Optional configuration for the Digital Twin models
            
        Returns:
            Tuple of (success, twin_id, error_message)
        """
        raise NotImplementedError
    
    @abstractmethod
    async def get_digital_twin(
        self,
        twin_id: Optional[Union[str, UUID]] = None,
        patient_id: Optional[Union[str, UUID]] = None
    ) -> Optional[Dict[str, Any]]:
        """
        Retrieve a Digital Twin by ID or patient ID.
        
        Args:
            twin_id: Optional unique identifier for the Digital Twin
            patient_id: Optional unique identifier for the patient
            
        Returns:
            The Digital Twin record if found, None otherwise
        """
        raise NotImplementedError
    
    @abstractmethod
    async def update_digital_twin(
        self,
        twin_id: Union[str, UUID],
        data: Dict[str, Any]
    ) -> Tuple[bool, Optional[str]]:
        """
        Update an existing Digital Twin with new data.
        
        Args:
            twin_id: Unique identifier for the Digital Twin
            data: New data to update the Digital Twin with
            
        Returns:
            Tuple of (success, error_message)
        """
        raise NotImplementedError
    
    @abstractmethod
    async def process_event(
        self,
        patient_id: Union[str, UUID],
        event_type: str,
        event_data: Dict[str, Any],
        timestamp: Optional[datetime] = None
    ) -> Tuple[bool, Optional[List[Dict[str, Any]]], Optional[str]]:
        """
        Process a new event and update the Digital Twin accordingly.
        
        Args:
            patient_id: Unique identifier for the patient
            event_type: Type of event (e.g., 'medication_change', 'symptom_report')
            event_data: Data associated with the event
            timestamp: Optional timestamp for the event
            
        Returns:
            Tuple of (success, generated_insights, error_message)
        """
        raise NotImplementedError
    
    @abstractmethod
    async def predict_outcome(
        self,
        patient_id: Union[str, UUID],
        outcome_type: str,
        prediction_horizon: str,
        context: Optional[Dict[str, Any]] = None
    ) -> Tuple[Dict[str, Any], float]:
        """
        Generate a prediction for a specific outcome using the Digital Twin.
        
        Args:
            patient_id: Unique identifier for the patient
            outcome_type: Type of outcome to predict
            prediction_horizon: Time horizon for the prediction (e.g., '30d', '6m')
            context: Optional additional context for the prediction
            
        Returns:
            Tuple of (prediction_result, confidence)
        """
        raise NotImplementedError
    
    @abstractmethod
    async def get_twin_insights(
        self,
        patient_id: Union[str, UUID],
        insight_type: Optional[str] = None,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
        limit: int = 20
    ) -> List[Dict[str, Any]]:
        """
        Retrieve insights generated by the Digital Twin.
        
        Args:
            patient_id: Unique identifier for the patient
            insight_type: Optional type of insights to filter by
            start_time: Optional start of time range
            end_time: Optional end of time range
            limit: Maximum number of insights to return
            
        Returns:
            List of insight records
        """
        raise NotImplementedError
    
    @abstractmethod
    async def simulate_intervention(
        self,
        patient_id: Union[str, UUID],
        intervention_type: str,
        intervention_parameters: Dict[str, Any],
        simulation_horizon: str
    ) -> Dict[str, Any]:
        """
        Simulate the effect of an intervention on the patient's trajectory.
        
        Args:
            patient_id: Unique identifier for the patient
            intervention_type: Type of intervention to simulate
            intervention_parameters: Parameters of the intervention
            simulation_horizon: Time horizon for the simulation
            
        Returns:
            Simulation results including predicted outcomes
        """
        raise NotImplementedError
    
    @abstractmethod
    async def compare_treatments(
        self,
        patient_id: Union[str, UUID],
        treatment_options: List[Dict[str, Any]],
        outcome_metrics: List[str],
        simulation_horizon: str
    ) -> List[Dict[str, Any]]:
        """
        Compare multiple treatment options for a patient.
        
        Args:
            patient_id: Unique identifier for the patient
            treatment_options: List of treatment options to compare
            outcome_metrics: Metrics to use for comparison
            simulation_horizon: Time horizon for the simulation
            
        Returns:
            Comparison results for each treatment option
        """
        raise NotImplementedError
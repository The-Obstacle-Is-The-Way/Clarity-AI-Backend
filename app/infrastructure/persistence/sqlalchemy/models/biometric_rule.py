"""
SQLAlchemy model for BiometricRule entity.

This module defines the database model for storing BiometricRule entities
using SQLAlchemy ORM. It represents the database schema and mapping for
biometric rules in the Novamind platform.
"""

import uuid
from datetime import datetime

from sqlalchemy import (
    JSON,
    Boolean,

    DateTime,
    ForeignKey,
    String,
    Text,
)
from sqlalchemy import UUID as SQLAlchemyUUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.infrastructure.persistence.sqlalchemy.models.base import (
    AuditMixin,
    Base,
    TimestampMixin,
)


class BiometricRuleModel(Base, TimestampMixin, AuditMixin):
    """SQLAlchemy model for storing BiometricRule entities."""

    __tablename__ = "biometric_rules"

    # Core fields
    id: Mapped[uuid.UUID] = mapped_column(SQLAlchemyUUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    name: Mapped[str] = mapped_column(String(255), nullable=False, doc="Name of the rule", unique=True)
    description: Mapped[str | None] = mapped_column(Text, nullable=True, doc="Description of the rule")

    # Rule configuration
    conditions: Mapped[dict] = mapped_column(JSON, nullable=False, doc="JSON array of rule conditions")
    logical_operator: Mapped[str] = mapped_column(
        String(10),
        nullable=False,
        default="AND",
        doc="Logical operator to combine conditions (AND/OR)",
    )
    alert_priority: Mapped[str] = mapped_column(
        String(20),
        nullable=False,
        doc="Priority level for alerts generated by this rule",
    )
    is_active: Mapped[bool] = mapped_column(
        Boolean,
        nullable=False,
        default=True,
        doc="Whether the rule is currently active",
    )

    # Relationships
    patient_id: Mapped[uuid.UUID | None] = mapped_column(
        SQLAlchemyUUID(as_uuid=True),
        ForeignKey("patients.id", ondelete="CASCADE"),
        nullable=True,
        doc="ID of the patient this rule is for (NULL for global rules",
    )
    patient = relationship("Patient", back_populates="biometric_rules")
    provider_id: Mapped[uuid.UUID | None] = mapped_column(
        SQLAlchemyUUID(as_uuid=True),
        ForeignKey("users.id", ondelete="SET NULL"),
        nullable=True,
        doc="ID of the provider who created this rule",
    )

    # Metadata
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=datetime.now,
        doc="When the rule was created",
    )
    updated_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True, doc="When the rule was last updated")
    rule_metadata: Mapped[dict | None] = mapped_column(JSON, nullable=True, doc="Additional metadata for the rule")

    def __repr__(self) -> str:
        """Get string representation of the model."""
        return f"<BiometricRuleModel(id={self.id}, name={self.name})>"


class PatientBiometricRuleModel(Base, TimestampMixin):
    __tablename__ = "patient_biometric_rules"

    id: Mapped[uuid.UUID] = mapped_column(SQLAlchemyUUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    patient_id: Mapped[uuid.UUID | None] = mapped_column(
        SQLAlchemyUUID(as_uuid=True),
        ForeignKey("patients.id"),
        nullable=False,
        index=True,
    )
    rule_id: Mapped[uuid.UUID] = mapped_column(
        SQLAlchemyUUID(as_uuid=True),
        ForeignKey("biometric_rules.id"),
        nullable=False,
        index=True,
    )

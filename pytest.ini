[pytest]
# Command-line options
addopts = -ra -q --tb=short --strict-markers --color=yes --import-mode=importlib

# Logging configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Enhanced asyncio mode for async tests
asyncio_mode = auto

# Test discovery
testpaths = app/tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Strict xfail handling
xfail_strict = true

# Register custom markers
markers =
    unit: unit tests
    integration: integration tests
    e2e: end-to-end tests
    slow: marks tests as slow
    core: core functionality tests
    authentication: authentication related tests
    security: security related tests
    api: API endpoint tests
    repository: repository tests
    service: service tests
    encryption: encryption tests
    aws: AWS-related tests
    database: tests that interact with the database
    performance: performance tests
    sql: tests SQL-specific functionality
    external: tests that access external services
    standalone: tests that can run in isolation
    hipaa: tests ensuring HIPAA compliance
    db_required: tests requiring a database connection
    venv_only: tests that should only run in a virtual environment
    ml: machine learning related tests
    phi: personal health information related tests
    no_mock_dynamodb_resource: skip mocking boto3.resource in the mock_boto3 fixture
    simulate_load_failure: Mark test to simulate a DynamoDB table load failure during initialization
    asyncio: mark a test as an asyncio test (can be used with scope param)

# Configure test summary


# Add environment variables for testing to prevent application initialization errors
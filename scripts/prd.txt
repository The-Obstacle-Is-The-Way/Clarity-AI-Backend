# Clarity AI Backend Refactoring Project Requirements

## Project Overview
The Clarity AI Backend requires significant refactoring to adhere to Clean Architecture principles, implement SOLID design patterns, and ensure HIPAA compliance. The current codebase contains architectural violations, missing implementations, and inconsistent dependency injection patterns that need to be addressed.

## Critical Requirements

### HIPAA Compliance
1. Implement centralized error handling to prevent PHI exposure in API responses
2. Ensure all error messages are sanitized before being returned to clients
3. Maintain comprehensive audit logging of all PHI access
4. Enforce proper authentication and authorization throughout the API
5. Implement secure session management with token blacklisting

### Clean Architecture Compliance
1. Move all interface definitions to the core layer
2. Replace direct infrastructure imports with proper dependency injection
3. Ensure presentation layer only depends on application layer through interfaces
4. Implement missing interfaces (IAuditLogger, IPasswordHandler, ITokenBlacklistRepository)
5. Standardize interface naming and method signatures

### API Standardization
1. Complete missing route implementations (patient.py, actigraphy.py)
2. Implement missing endpoints (PATCH /alerts/{id}/status, POST /patients/{id}/trigger)
3. Move dependency providers to dedicated modules
4. Standardize response models and error handling
5. Ensure consistent API documentation

### Middleware Enhancements
1. Fix/implement RequestIdMiddleware
2. Correct RateLimitingMiddleware implementation
3. Determine requirements for LoggingMiddleware
4. Ensure middleware components follow clean architecture

### Testing Infrastructure
1. Standardize database handling in tests
2. Implement missing test fixtures
3. Create Pydantic models for request validation
4. Fix interface inconsistencies causing test failures
5. Ensure high test coverage for all implementations

## Technical Requirements

1. All code must follow SOLID principles
2. Dependency injection must be used consistently
3. Error handling must be centralized and HIPAA-compliant
4. Repository pattern must be implemented correctly
5. Interfaces must be in the core layer with implementations in infrastructure
6. API routes must use dependency providers from dedicated modules
7. All endpoints must have comprehensive test coverage
8. Database access must follow clean architecture patterns
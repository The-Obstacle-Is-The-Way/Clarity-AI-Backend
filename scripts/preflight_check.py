#!/usr/bin/env python3\n\"\"\"\nClarity-AI Backend Pre-flight Check\n\nRun this script BEFORE installation to verify system requirements.\nThis helps identify potential issues early in the setup process.\n\"\"\"\n\nimport os\nimport platform\nimport shutil\nimport subprocess\nimport sys\nfrom pathlib import Path\n\n\ndef check_python_version():\n    \"\"\"Check Python version compatibility.\"\"\"\n    print(\"🐍 Checking Python version...\")\n    version = sys.version_info\n    \n    if version.major == 3 and version.minor >= 10:\n        print(f\"   ✅ Python {version.major}.{version.minor}.{version.micro} (Compatible)\")\n        return True\n    elif version.major == 3 and version.minor >= 8:\n        print(f\"   ⚠️  Python {version.major}.{version.minor}.{version.micro} (May work, but 3.10+ recommended)\")\n        return True\n    else:\n        print(f\"   ❌ Python {version.major}.{version.minor}.{version.micro} (Requires 3.10+)\")\n        print(\"   💡 Install Python 3.10+ from https://python.org\")\n        return False\n\n\ndef check_system_info():\n    \"\"\"Display system information.\"\"\"\n    print(\"💻 System Information:\")\n    print(f\"   🖥️  OS: {platform.system()} {platform.release()}\")\n    print(f\"   🏗️  Architecture: {platform.machine()}\")\n    print(f\"   🐍 Python: {platform.python_version()}\")\n    return True\n\n\ndef check_git():\n    \"\"\"Check if Git is available.\"\"\"\n    print(\"📦 Checking Git...\")\n    if shutil.which('git'):\n        try:\n            result = subprocess.run(['git', '--version'], capture_output=True, text=True)\n            version = result.stdout.strip()\n            print(f\"   ✅ {version}\")\n            return True\n        except Exception as e:\n            print(f\"   ❌ Git error: {e}\")\n            return False\n    else:\n        print(\"   ❌ Git not found\")\n        print(\"   💡 Install Git from https://git-scm.com\")\n        return False\n\n\ndef check_pip():\n    \"\"\"Check if pip is available and up to date.\"\"\"\n    print(\"📦 Checking pip...\")\n    try:\n        import pip\n        result = subprocess.run([sys.executable, '-m', 'pip', '--version'], capture_output=True, text=True)\n        if result.returncode == 0:\n            version = result.stdout.strip()\n            print(f\"   ✅ {version}\")\n            return True\n        else:\n            print(\"   ❌ pip not working correctly\")\n            return False\n    except ImportError:\n        print(\"   ❌ pip not found\")\n        print(\"   💡 Install pip: python -m ensurepip --upgrade\")\n        return False\n\n\ndef check_docker():\n    \"\"\"Check if Docker is available (optional).\"\"\"\n    print(\"🐳 Checking Docker (optional)...\")\n    if shutil.which('docker'):\n        try:\n            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)\n            if result.returncode == 0:\n                version = result.stdout.strip()\n                print(f\"   ✅ {version}\")\n                \n                # Check if Docker daemon is running\n                daemon_result = subprocess.run(['docker', 'info'], capture_output=True, text=True)\n                if daemon_result.returncode == 0:\n                    print(\"   ✅ Docker daemon is running\")\n                else:\n                    print(\"   ⚠️  Docker installed but daemon not running\")\n                    print(\"   💡 Start Docker Desktop or run: sudo systemctl start docker\")\n                return True\n            else:\n                print(\"   ❌ Docker command failed\")\n                return False\n        except Exception as e:\n            print(f\"   ❌ Docker error: {e}\")\n            return False\n    else:\n        print(\"   ⚠️  Docker not found (optional for local databases)\")\n        print(\"   💡 Install from https://docker.com\")\n        return True  # Not required\n\n\ndef check_disk_space():\n    \"\"\"Check available disk space.\"\"\"\n    print(\"💾 Checking disk space...\")\n    try:\n        current_dir = Path.cwd()\n        stat = shutil.disk_usage(current_dir)\n        \n        total_gb = stat.total / (1024**3)\n        free_gb = stat.free / (1024**3)\n        used_gb = (stat.total - stat.free) / (1024**3)\n        \n        print(f\"   📊 Total: {total_gb:.1f} GB\")\n        print(f\"   📊 Used:  {used_gb:.1f} GB\")\n        print(f\"   📊 Free:  {free_gb:.1f} GB\")\n        \n        if free_gb >= 2.0:\n            print(\"   ✅ Sufficient disk space\")\n            return True\n        elif free_gb >= 1.0:\n            print(\"   ⚠️  Low disk space (may be sufficient)\")\n            return True\n        else:\n            print(\"   ❌ Insufficient disk space (need at least 1GB)\")\n            return False\n            \n    except Exception as e:\n        print(f\"   ❌ Could not check disk space: {e}\")\n        return True  # Don't fail on this\n\n\ndef check_network():\n    \"\"\"Check network connectivity.\"\"\"\n    print(\"🌐 Checking network connectivity...\")\n    try:\n        import urllib.request\n        urllib.request.urlopen('https://pypi.org', timeout=10)\n        print(\"   ✅ Internet connection available\")\n        return True\n    except Exception as e:\n        print(f\"   ❌ Network connection failed: {e}\")\n        print(\"   💡 Check your internet connection\")\n        return False\n\n\ndef check_write_permissions():\n    \"\"\"Check write permissions in current directory.\"\"\"\n    print(\"📝 Checking write permissions...\")\n    try:\n        test_file = Path.cwd() / '.write_test_tmp'\n        test_file.write_text('test')\n        test_file.unlink()\n        print(\"   ✅ Write permissions OK\")\n        return True\n    except Exception as e:\n        print(f\"   ❌ Write permission error: {e}\")\n        return False\n\n\ndef check_environment_variables():\n    \"\"\"Check for potentially problematic environment variables.\"\"\"\n    print(\"🔧 Checking environment...\")\n    \n    # Check for Python path issues\n    pythonpath = os.environ.get('PYTHONPATH')\n    if pythonpath:\n        print(f\"   ⚠️  PYTHONPATH is set: {pythonpath}\")\n        print(\"   💡 This might cause import issues\")\n    else:\n        print(\"   ✅ PYTHONPATH not set (good)\")\n    \n    # Check for virtual environment\n    venv = os.environ.get('VIRTUAL_ENV')\n    if venv:\n        print(f\"   ✅ Virtual environment detected: {Path(venv).name}\")\n    else:\n        print(\"   ⚠️  No virtual environment detected\")\n        print(\"   💡 Consider using: python -m venv .venv\")\n    \n    return True\n\n\ndef print_installation_instructions():\n    \"\"\"Print installation instructions.\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"🚀 INSTALLATION INSTRUCTIONS\")\n    print(\"=\"*60)\n    print(\"\\n1️⃣  Clone the repository:\")\n    print(\"   git clone <repository-url>\")\n    print(\"   cd Clarity-AI-Backend\")\n    \n    print(\"\\n2️⃣  Set up virtual environment:\")\n    print(\"   python -m venv .venv\")\n    print(\"   source .venv/bin/activate  # On Windows: .venv\\\\Scripts\\\\activate\")\n    \n    print(\"\\n3️⃣  Install dependencies:\")\n    print(\"   pip install -e .[dev,test]\")\n    \n    print(\"\\n4️⃣  Configure environment:\")\n    print(\"   cp .env.example .env\")\n    print(\"   # Edit .env as needed\")\n    \n    print(\"\\n5️⃣  Verify installation:\")\n    print(\"   python scripts/health_check.py\")\n    \n    print(\"\\n⚡ Quick start:\")\n    print(\"   make setup     # Complete setup\")\n    print(\"   make start     # Start the application\")\n    \n    print(\"\\n📚 See INSTALLATION_GUIDE.md for detailed instructions.\")\n\n\ndef main():\n    \"\"\"Run all pre-flight checks.\"\"\"\n    print(\"🚁 Clarity-AI Backend Pre-flight Check\")\n    print(\"=\" * 40)\n    \n    checks = [\n        check_system_info(),\n        check_python_version(),\n        check_pip(),\n        check_git(),\n        check_docker(),\n        check_disk_space(),\n        check_network(),\n        check_write_permissions(),\n        check_environment_variables(),\n    ]\n    \n    passed = sum(bool(check) for check in checks)\n    total = len(checks)\n    \n    print(f\"\\n📊 Pre-flight Results: {passed}/{total} checks passed\")\n    \n    if passed >= total - 1:  # Allow 1 optional check to fail\n        print(\"\\n🎉 System ready for installation!\")\n        print_installation_instructions()\n        return 0\n    else:\n        print(f\"\\n⚠️  {total - passed} critical checks failed.\")\n        print(\"Please resolve the issues above before installation.\")\n        return 1\n\n\nif __name__ == \"__main__\":\n    exit_code = main()\n    sys.exit(exit_code)\n"
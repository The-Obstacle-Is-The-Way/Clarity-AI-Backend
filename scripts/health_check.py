#!/usr/bin/env python3\n\"\"\"\nClarity-AI Backend Health Check Script\n\nQuick validation script to verify installation and basic functionality.\nRun this after installation to ensure everything is working correctly.\n\"\"\"\n\nimport asyncio\nimport json\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add the app directory to Python path\nproject_root = Path(__file__).parent.parent\nsys.path.insert(0, str(project_root))\n\n\ndef check_python_version():\n    \"\"\"Check Python version.\"\"\"\n    print(\"🐍 Checking Python version...\")\n    version = sys.version_info\n    if version.major == 3 and version.minor >= 10:\n        print(f\"   ✅ Python {version.major}.{version.minor}.{version.micro} (Compatible)\")\n        return True\n    else:\n        print(f\"   ❌ Python {version.major}.{version.minor}.{version.micro} (Requires 3.10+)\")\n        return False\n\n\ndef check_virtual_environment():\n    \"\"\"Check if running in virtual environment.\"\"\"\n    print(\"🔧 Checking virtual environment...\")\n    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):\n        print(\"   ✅ Running in virtual environment\")\n        return True\n    else:\n        print(\"   ⚠️  Not running in virtual environment (recommended but not required)\")\n        return True  # Don't fail on this\n\n\ndef check_dependencies():\n    \"\"\"Check critical dependencies.\"\"\"\n    print(\"📦 Checking dependencies...\")\n    critical_deps = [\n        'fastapi',\n        'uvicorn',\n        'sqlalchemy',\n        'pydantic',\n        'redis',\n        'psycopg',\n        'alembic'\n    ]\n    \n    failed = []\n    for dep in critical_deps:\n        try:\n            __import__(dep)\n            print(f\"   ✅ {dep}\")\n        except ImportError:\n            print(f\"   ❌ {dep} (missing)\")\n            failed.append(dep)\n    \n    if failed:\n        print(f\"\\n   ❌ Missing dependencies: {', '.join(failed)}\")\n        print(\"   💡 Run: pip install -e .[dev,test]\")\n        return False\n    return True\n\n\ndef check_app_import():\n    \"\"\"Check if the main app can be imported.\"\"\"\n    print(\"🚀 Checking application import...\")\n    try:\n        from app.main import app\n        print(\"   ✅ Main application imports successfully\")\n        return True\n    except Exception as e:\n        print(f\"   ❌ Failed to import app: {e}\")\n        return False\n\n\ndef check_environment_file():\n    \"\"\"Check environment configuration.\"\"\"\n    print(\"🔧 Checking environment configuration...\")\n    env_file = project_root / \".env\"\n    env_example = project_root / \".env.example\"\n    \n    if env_example.exists():\n        print(\"   ✅ .env.example found\")\n    else:\n        print(\"   ❌ .env.example missing\")\n        return False\n    \n    if env_file.exists():\n        print(\"   ✅ .env file found\")\n    else:\n        print(\"   ⚠️  .env file missing (using defaults)\")\n        print(\"   💡 Run: cp .env.example .env\")\n    \n    return True\n\n\nasync def check_app_startup():\n    \"\"\"Check if the app can start up without errors.\"\"\"\n    print(\"🏃 Testing application startup...\")\n    try:\n        # Import and create the app\n        from app.main import app\n        \n        # Try to access the root path\n        from fastapi.testclient import TestClient\n        client = TestClient(app)\n        \n        # Test health endpoint\n        response = client.get(\"/api/v1/health\")\n        if response.status_code == 200:\n            print(\"   ✅ Health endpoint responds correctly\")\n            health_data = response.json()\n            print(f\"   📊 Status: {health_data.get('status', 'unknown')}\")\n            return True\n        else:\n            print(f\"   ❌ Health endpoint failed: {response.status_code}\")\n            return False\n            \n    except Exception as e:\n        print(f\"   ❌ Application startup failed: {e}\")\n        return False\n\n\ndef check_database_config():\n    \"\"\"Check database configuration.\"\"\"\n    print(\"🗄️  Checking database configuration...\")\n    try:\n        from app.core.config import get_settings\n        settings = get_settings()\n        \n        if hasattr(settings, 'ASYNC_DATABASE_URL'):\n            print(\"   ✅ Database URL configured\")\n            db_url = str(settings.ASYNC_DATABASE_URL)\n            if 'sqlite' in db_url:\n                print(\"   📝 Using SQLite (development mode)\")\n            elif 'postgresql' in db_url:\n                print(\"   🐘 Using PostgreSQL\")\n            else:\n                print(f\"   📊 Using: {db_url.split('://', 1)[0]}\")\n        else:\n            print(\"   ❌ Database URL not configured\")\n            return False\n            \n        return True\n    except Exception as e:\n        print(f\"   ❌ Database config check failed: {e}\")\n        return False\n\n\ndef check_redis_config():\n    \"\"\"Check Redis configuration.\"\"\"\n    print(\"🔴 Checking Redis configuration...\")\n    try:\n        from app.core.config import get_settings\n        settings = get_settings()\n        \n        if hasattr(settings, 'REDIS_URL'):\n            print(\"   ✅ Redis URL configured\")\n            redis_url = str(settings.REDIS_URL)\n            print(f\"   🔗 Redis: {redis_url}\")\n        else:\n            print(\"   ⚠️  Redis URL not configured (optional)\")\n            \n        return True\n    except Exception as e:\n        print(f\"   ❌ Redis config check failed: {e}\")\n        return False\n\n\ndef print_next_steps():\n    \"\"\"Print helpful next steps.\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"🎉 HEALTH CHECK COMPLETE\")\n    print(\"=\"*60)\n    print(\"\\n📋 Next Steps:\")\n    print(\"  1. Start services: make docker-up\")\n    print(\"  2. Start app: make start\")\n    print(\"  3. Visit: http://localhost:8000/docs\")\n    print(\"  4. Run tests: make test-fast\")\n    print(\"\\n🔧 Useful Commands:\")\n    print(\"  • make help           - Show all available commands\")\n    print(\"  • make info           - Show project information\")\n    print(\"  • make quick-start    - Start everything at once\")\n    print(\"  • make health         - Check application health\")\n    print(\"\\n📚 Documentation:\")\n    print(\"  • Installation Guide:   INSTALLATION_GUIDE.md\")\n    print(\"  • Technical Status:     TECHNICAL_STATUS.md\")\n    print(\"  • Deployment Guide:     DEPLOYMENT_READINESS.md\")\n\n\nasync def main():\n    \"\"\"Run all health checks.\"\"\"\n    print(\"🏥 Clarity-AI Backend Health Check\")\n    print(\"=\" * 40)\n    \n    checks = [\n        check_python_version(),\n        check_virtual_environment(),\n        check_dependencies(),\n        check_environment_file(),\n        check_database_config(),\n        check_redis_config(),\n        check_app_import(),\n        await check_app_startup(),\n    ]\n    \n    passed = sum(checks)\n    total = len(checks)\n    \n    print(f\"\\n📊 Health Check Results: {passed}/{total} checks passed\")\n    \n    if passed == total:\n        print(\"\\n🎉 All checks passed! Installation looks good.\")\n        print_next_steps()\n        return 0\n    else:\n        print(f\"\\n⚠️  {total - passed} checks failed. Please review the issues above.\")\n        return 1\n\n\nif __name__ == \"__main__\":\n    exit_code = asyncio.run(main())\n    sys.exit(exit_code)\n"
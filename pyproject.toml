[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "clarity-ai-backend"
version = "0.0.1" # TODO: Update with actual version
description = "Clarity AI Backend for Digital Twin Psychiatry Platform" # TODO: Update description
readme = "README.md"
requires-python = ">=3.10" # Based on Ruff config, adjust if needed
license = { file = "LICENSE" }
# TODO: Add authors, maintainers, keywords, classifiers as needed

dependencies = [
    "aiohttp==3.11.18",
    "alembic==1.15.2",
    "asyncpg==0.30.0",
    "boto3==1.38.3",
    "email-validator==2.2.0",
    "fastapi==0.115.12",
    "greenlet==3.2.1",
    "httpx==0.28.1",
    "loguru==0.7.2", # From requirements-standalone.txt
    "numpy==1.26.4", # From requirements-analytics.txt
    "openai", # From requirements-standalone.txt
    "opentelemetry-api==1.28.0", # From requirements-standalone.txt
    "opentelemetry-exporter-otlp-proto-http==1.28.0", # From requirements-standalone.txt
    "opentelemetry-instrumentation-fastapi==0.49b0", # From requirements-standalone.txt
    "opentelemetry-sdk==1.28.0", # From requirements-standalone.txt
    "pandas", # From requirements-analytics.txt
    "passlib[bcrypt]", # From requirements-security.txt
    "psycopg2-binary==2.9.9",
    "pydantic==2.9.1",
    "pydantic-settings==2.4.0",
    "python-dotenv==1.0.1",
    "python-jose[cryptography]==3.4.0", # From requirements-security.txt - Updated for security
    "python-multipart==0.0.20",
    "pyyaml==6.0.2",
    "redis==5.0.8", # From requirements-standalone.txt
    "sentry-sdk>=2.8.0", # Application monitoring and error tracking
    "slowapi==0.1.9", # From requirements-security.txt - Fixed version
    "requests",
    "scikit-learn==1.5.2", # From requirements-analytics.txt
    "scipy==1.15.0", # From requirements-analytics.txt
    "smart-open[s3]==7.1.0",
    "spacy", # From requirements-analytics.txt
    "sqlalchemy[asyncio]==2.0.40",
    "structlog==25.3.0",
    "tenacity==9.1.2",
    "torch==2.7.0", # From requirements-analytics.txt
    "torchvision==0.22.0", # From requirements-analytics.txt
    "transformers==4.51.3", # From requirements-analytics.txt
    "uvicorn==0.34.2",
    "xgboost==2.1.4", # From requirements-analytics.txt
]

[project.optional-dependencies]
dev = [
    "black==24.8.0",
    "ipykernel",
    "isort==5.13.2",
    "jupyter==1.0.0",
    "mypy>=1.9,<1.11",
    "pre-commit",
    "ruff>=0.4.5",
    "watchfiles==0.23.0",
]

test = [
    "coverage[toml]==7.6.0",
    "faker==37.1.0",
    "hypothesis==6.88.1",
    "pytest==8.3.5",
    "pytest-asyncio==0.26.0",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
]

analytics = [
    # Dependencies already listed in main dependencies are implicitly included
]

security = [
    # Dependencies already listed in main dependencies are implicitly included
]

standalone = [
    # Dependencies already listed in main dependencies are implicitly included
]

[tool.ruff]
# Auto-fix on commit
fix = true
# Target Python 3.12 bytecode / stdlib
target-version = "py312"
# Additional ignores: allow non-crypto random (S311)
extend-ignore = ["S311"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.10.
# target-version = "py310"

[tool.ruff.lint]
# Enable flake8-bugbear (`B`) rules.
select = ["E", "F", "B", "I", "N", "UP", "ANN", "S", "A", "C4", "PTH", "RUF"]
# Ignore specific issues for now - we'll fix them progressively
ignore = [
    "ANN101",  # Missing self type annotation
    "ANN102",  # Missing cls type annotation
    "ANN204",  # Missing return type for special method
    "ANN401",  # Any type - we'll fix these later
    "E501",    # Line too long - we'll fix these in a dedicated pass
    "S101",    # Use of assert in tests is acceptable
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use assert and have passwords
"**/tests/**/*.py" = ["S101", "S105", "S106", "S107", "S311"]
# Migrations can use print and don't need docstrings
"**/migrations/**/*.py" = ["T201", "D"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "pytest"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Body"]

[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "standalone: tests that can run with no external dependencies",
    "unit: tests that require Python packages but no external services",
    "integration: tests that require database connections",
    "e2e: end-to-end tests that test the full system",
    "security: tests that validate security features",
    "slow: tests that take a long time to run",
    "db_required: tests that require a database connection",
    "venv_only: tests that require Python packages but no external services",
]

asyncio_mode = "strict"
addopts = "--strict-markers --cov=app --cov-report=term"

[tool.black]
line-length = 100
target-version = ["py310"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | alembic
  | venv
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/migrations/*", "**/alembic/*"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# Add tolerant handling for third-party libraries
[[tool.mypy.overrides]]
module = [
    "jose.*",
    "jwt.*",
    "pandas.*",
    "boto3.*",
    "botocore.*",
    "sklearn.*",
    "tensorflow.*",
    "openai.*",
    "torch.*",
    "joblib.*",
    "redis.*"
]
ignore_missing_imports = true
